clear all;
close all;
clc;

%% Compiling the two scripts related to the moving source


%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SCRIPT WITH     
%%%%% FIXED SOUND SOURCE 
%%%%% WITH PARTITION     
%%%%%%%%%%%%%%%%%%%%%%%%%


%% Fixed Source
X = [1; 2; 0];
%--------------

%% Reading of source audio file
[signal, fs] = audioread ('sound.wav');
%------------------------------------

%% Initialisation of the room 

simWFX = simulator.SimulatorConvexRoom();

set(simWFX, ...
    'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa'), ...
    'Sources', {simulator.source.Point()}, ...
    'Sinks',   simulator.AudioSink(2) ...
    );

set(simWFX.Sources{1}, ...
    'Name', 'Cello', ...
    'Position', [0;0;0], ... 
    'AudioBuffer', simulator.buffer.FIFO(1) ...
    );

simWFX.set('Init',true);

%-------------------------------------

%% Segment partition

N = 5; % number of segment portions
%-----

%%

for k = 1 : N 
    pas_son = length(signal) / N;
    son_frame = signal( pas_son * (k - 1) + 1 :  pas_son * k , : );
    frame_k = ['Frame_' int2str(k) '.wav']; % name of audio file
    audiowrite (frame_k, son_frame, fs);
      
     set(simWFX.Sources{1}.AudioBuffer, ...
        'File', frame_k ...
        );

    vec_UnitX = simWFX.Sinks.Position - X;
    vec_final_UnitX = vec_UnitX / norm(vec_UnitX);
    set(simWFX.Sources{1}, ...
        'Position', X, ...
        'UnitX', vec_final_UnitX ...
        );
    
    while ~simWFX.isFinished()
        simWFX.set('Refresh',true);
        simWFX.set('Process',true);
    end

    dataWFX = simWFX.Sinks.getData();
end

%% Result

file = 'out_moving_source_with_partition.wav'; % nom du fichier son
audiowrite(file, dataWFX, simWFX.SampleRate);

%% End
simWFX.set('ShutDown',true);
simWFX.plot();
%-----------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SCRIPT WITH     
%%%%% FIXED SOUND SOURCE 
%%%%% WITHOUT PARTITION     
%%%%%%%%%%%%%%%%%%%%%%%%%

%% Working trajectory : segment

% Initial position
Xi = [1; 2; 0];

% Reading of source audio file

[signal, fs] = audioread ('sound.wav');
signal = signal(:,1);
file = 'sound.wav';
%-----------------------------------

%% Initialisation of the room
simWOFX = simulator.SimulatorConvexRoom();

set(simWOFX, ...
    'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa'), ...
    'Sources', {simulator.source.Point()}, ...
    'Sinks',   simulator.AudioSink(2) ...
    );

set(simWOFX.Sources{1}, ...
    'Name', 'Cello', ...
    'AudioBuffer', simulator.buffer.FIFO(1) ...
    );

set(simWOFX.Sources{1}.AudioBuffer, ...
    'File', file ...
    );

simWOFX.set('Init',true);
%--------------------------------------------

%% Generation of the binaural sound

% Generation of the binaural sound
% corresponding to the move from Xi to Xf 

vec_UnitX = simWOFX.Sinks.Position - Xi;
vec_final_UnitX = vec_UnitX / norm(vec_UnitX);
set(simWOFX.Sources{1}, ...
    'Position', Xi, ...
    'UnitX', vec_final_UnitX ...
    );

while ~simWOFX.isFinished()
    simWOFX.set('Refresh',true); 
    simWOFX.set('Process',true);
end

dataWOFX = simWOFX.Sinks.getData();

file = 'out_moving_source_without_partition.wav';

simWOFX.Sinks.saveFile(file, simWOFX.SampleRate);

%% End
simWOFX.set('ShutDown',true);
simWOFX.plot();
%-----------------------------

%% Comparaison of the final results obtained
% with and without segment partition

temps = [0 : 1 : size(dataWFX,1) - 1]' / fs;
equality = dataWOFX == dataWFX;
difference = dataWOFX - dataWFX;
figure
plot(temps, difference(:,1));
title('Difference between ear signals generated by a fixed source, with and without partition')
grid;
%------------------------------------------------------

%% Compiling the two scripts related to the moving source

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SCRIPT WITH     
%%%%% MOVING SOUND SOURCE 
%%%%% WITH SOUND AND
%%%%% TRAJECTORY PARTITION
%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Reading of source audio file
[signal, fs] = audioread ('sound.wav');
duree_son = length(signal) / fs;
signal = signal(:,1);
file = 'sound.wav';
%-----------------------------------

%% Working trajectory : segment

% Initial and Final Positions
Xi = [0;0;0];
Xf = [3;3;0];

%% Initialisation of the room 
simWMO = simulator.SimulatorConvexRoom();

set(simWMO, ...
    'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa'), ...
    'Sources', {simulator.source.Point()}, ...
    'Sinks',   simulator.AudioSink(2) ...
    );

set(simWMO.Sources{1}, ...
    'Name', 'Cello', ...
    'Position', [0;0;0], ... 
    'AudioBuffer', simulator.buffer.FIFO(1) ...
    );

simWMO.set('Init',true);

%% Generation of the binaural sound

% The input V contains the speeds
% according to the x-axis and the y-axis
% in such way that the norm of V equals V_norm
% V_norm = distanceVecteur(Xi, Xf) / duree_son;

% This choice of speed makes the source reach its final position
% at the exact moment the sound file ends

Vx = (Xf(1) - Xi(1)) / duree_son;
Vy = (Xf(2) - Xi(2)) / duree_son;
V = [Vx; Vy; 0];
%--------------------------------------------

%% Segment partition

N = 5; % number of segment portions

% X contains all points of the segment
dis = (Xi(1)-Xf(1))^2 + (Xi(2)-Xf(2))^2 + (Xi(3)-Xf(3))^2;
dis = sqrt(dis);

pas_lin = dis / (N);

parcours = 1; 

vecAsuivre = (Xf - Xi) / norm(Xi-Xf);

X = Xi';

while( parcours < N )
    vec_ajout = Xi + pas_lin*vecAsuivre*(parcours );
    X = [X; vec_ajout'];
    parcours = parcours + 1;
end
    
X = [X; Xf'];
%------------------------------

%% Processing

for k = 1 : N   
    Pas_Son = length(signal) / N;
    son_frame = signal( Pas_Son*(k-1)+1 :  Pas_Son*k , : );
    frame_k = ['Frame_' int2str(k) '.wav']; % name of audio file
    audiowrite (frame_k, son_frame, fs);
       
    Xi = X(k,:)';
    Xf = X(k+1,:)';

    set(simWMO.Sources{1}.AudioBuffer, ...
        'File', frame_k ...
        );

    set(simWMO.Sources{1}, ...
        'Position', Xi ... 
        );

    simWMO.Sources{1}.setDynamic( ...
        'Position', 'Velocity', V); % move source

    set(simWMO.Sources{1}, ...
        'Position', Xf ... %final position
        );

    PosSource = [];

    while( ~simWMO.isFinished() ) 
        simWMO.set('Refresh',true);
        PosSource = [PosSource; simWMO.Sources{1}.Position'];
        simWMO.Sources{1}.Position';
        simWMO.set('Process',true);
    end

    dataWMO = simWMO.Sinks.getData();
    PosIntermedSource = PosSource;
end

%% Result

file = 'out_moving_source_with_partition.wav'; % nom du fichier son
audiowrite(file, dataWMO, simWMO.SampleRate);

%% End
simWMO.set('ShutDown',true);
simWMO.plot();
%-----------------------------



%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SCRIPT WITH     
%%%%% MOVING SOUND SOURCE 
%%%%% WITHOUT SOUND NOR
%%%%% TRAJECTORY PARTITION
%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Reading of source audio file
[signal, fs] = audioread ('sound.wav');
duree_son = length(signal) / fs;
signal = signal(:,1);
file = 'sound.wav';
%-----------------------------------

%% Working trajectory : segment

% Initial and Final Positions
Xi = [0;0;0];
Xf = [3;3;0];

%% Initialisation of the room 
simWOMO = simulator.SimulatorConvexRoom();

set(simWOMO, ...
    'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa'), ...
    'Sources', {simulator.source.Point()}, ...
    'Sinks',   simulator.AudioSink(2) ...
    );

set(simWOMO.Sources{1}, ...
    'Name', 'Cello', ...
    'AudioBuffer', simulator.buffer.FIFO(1) ...
    );

set(simWOMO.Sources{1}.AudioBuffer, ...
    'File', file ...
    );

simWOMO.set('Init',true); 
%---------------------------------------------

%% Generation of the binaural sound

% The input V contains the speeds
% according to the x-axis and the y-axis
% in such way that the norm of V equals V_norm
% V_norm = distanceVecteur(Xi, Xf) / duree_son;

% This choice of speed makes the source reach its final position
% at the exact moment the sound file ends

Vx = (Xf(1) - Xi(1)) / duree_son;
Vy = (Xf(2) - Xi(2)) / duree_son;
V = [Vx; Vy; 0];
%--------------------------------------------

%% Generation of the binaural sound
% corresponding to the move from Xi to Xf 
set(simWOMO.Sources{1}, ...
        'Position', Xi ...
        );
    
simWOMO.Sources{1}.setDynamic( ...
    'Position', 'Velocity', V); % move source with V

set(simWOMO.Sources{1}, ...
    'Position', Xf ... % final position
    );

PosSource = [];

while( ~simWOMO.isFinished() ) 
    simWOMO.set('Refresh',true);
    PosSource = [PosSource; simWOMO.Sources{1}.Position'];
    simWOMO.Sources{1}.Position';
    simWOMO.set('Process',true);
end

dataWOMO = simWOMO.Sinks.getData();
file = 'out_moving_source_without_partition.wav';
simWOMO.Sinks.saveFile(file, simWOMO.SampleRate);
%-----------------------------------------------------------------

%% End
simWOMO.set('ShutDown',true);
simWOMO.plot();
%-----------------------------

%% Comparaison of the final results obtained

temps = [0 : 1 : size(dataWMO,1) - 1]' / fs;
equality =dataWOMO == dataWMO;
difference = dataWOMO - dataWMO;
figure
plot(temps, difference(:,1));
title('Difference between ear signals generated by a moving source with and without partition')
grid;
%------------------------------------------------------